-- This file is generated by automatic tools.
library ieee;
use ieee.std_logic_1164.all;
use work.eecs361.all;
use work.eecs361_gates.all;

entity Instruction is
	port(
		zero: in std_logic;
		clk : in std_logic;
		jump: in std_logic;
		branch: in std_logic;
		reset : in std_logic;
		instruction: out std_logic_vector(31 downto 0);
		pc0:out std_logic_vector(31 downto 0)
		
	);
end Instruction;

architecture structural of Instruction is
signal PC, PC_4, jump_PC, PC_in, PC_imm, PC_mu2, SignExt, Next_PC: std_logic_vector(31 downto 0);
signal sel0: std_logic;
signal ins: std_logic_vector(31 downto 0);
begin
	instruction <= ins;
	SignExt <= ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15)&ins(15 downto 0)&"00";

	and0: and_gate port map(x=>branch, y=>zero, z=>sel0);
	m0: mux_32 port map(sel=>reset, src0=> Next_PC, src1=> x"00400020", z=>PC_in);

	m1: mux_32 port map(sel=>jump, src0=> PC_mu2, src1=>jump_PC, z=> Next_PC);
	m2: mux_32 port map(sel=>sel0, src0=> PC_4, src1=> PC_imm, z=>PC_mu2);

	add0: complete_adder port map(a=>PC, b=>x"00000004", ci=>'0', s=>PC_4);
	add1: complete_adder port map(a=>PC_4, b=>SignExt, ci=>'0', s=>PC_imm);
	

	ddf0: dff_32 port map(clk=> clk, d=>PC_in, q=> PC);
	sram0: sram
		generic map(mem_file=>"sort_corrected_branch.dat")
		port map(cs=>'1', oe=>'1', we=>'0', addr=>PC, din=>PC, dout=>ins);
	jump_PC(31 downto 2) <= (PC(31 downto 28) & ins(25 downto 0));
	jump_PC(1 downto 0) <= "00";
	pc0 <= PC;
end structural;
